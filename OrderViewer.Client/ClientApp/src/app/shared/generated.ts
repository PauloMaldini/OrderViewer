/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export interface IClient {
  /**
   * @param body (optional)
   * @return Success
   */
  orderItems(body: OrderItemForCreatingDto | undefined): Promise<OrderItemDto>;
  /**
   * @param orderId (optional)
   * @param id (optional)
   * @param pageIndex (optional)
   * @param pageSize (optional)
   * @param orderBy (optional)
   * @return Success
   */
  orderItemsAll(orderId: number | null | undefined, id: number | null | undefined, pageIndex: number | null | undefined, pageSize: number | null | undefined, orderBy: string | null | undefined): Promise<OrderItemDto[]>;
  /**
   * @param id (optional)
   * @return Success
   */
  orderItems2(id: number | undefined): Promise<void>;
  /**
   * @return Success
   */
  orderItems3(id: number): Promise<OrderItemDto>;
  /**
   * @param body (optional)
   * @return Success
   */
  orderItems4(id: number, body: OrderItemForUpdatingDto | undefined): Promise<void>;
  /**
   * @param body (optional)
   * @return Success
   */
  orderItems5(id: number, body: Operation[] | null | undefined): Promise<void>;
  /**
   * @param body (optional)
   * @return Success
   */
  orders(body: OrderForCreatingDto | undefined): Promise<OrderDto>;
  /**
   * @param id (optional)
   * @param pageIndex (optional)
   * @param pageSize (optional)
   * @param orderBy (optional)
   * @return Success
   */
  ordersAll(id: number | null | undefined, pageIndex: number | null | undefined, pageSize: number | null | undefined, orderBy: string | null | undefined): Promise<OrderDto[]>;
  /**
   * @param id (optional)
   * @return Success
   */
  orders2(id: number | undefined): Promise<void>;
  /**
   * @return Success
   */
  orders3(id: number): Promise<OrderDto>;
  /**
   * @param body (optional)
   * @return Success
   */
  orders4(id: number, body: OrderForUpdatingDto | undefined): Promise<void>;
  /**
   * @param body (optional)
   * @return Success
   */
  orders5(id: number, body: Operation[] | null | undefined): Promise<void>;
  /**
   * @param orderId (optional)
   * @return Success
   */
  orderSummary(orderId: number | undefined): Promise<OrderSummaryDtoSelection>;
  /**
   * @param body (optional)
   * @return Success
   */
  products(body: ProductForCreatingDto | undefined): Promise<ProductDto>;
  /**
   * @param id (optional)
   * @param pageIndex (optional)
   * @param pageSize (optional)
   * @param orderBy (optional)
   * @return Success
   */
  productsAll(id: number | null | undefined, pageIndex: number | null | undefined, pageSize: number | null | undefined, orderBy: string | null | undefined): Promise<ProductDto[]>;
  /**
   * @param id (optional)
   * @return Success
   */
  products2(id: number | undefined): Promise<void>;
  /**
   * @return Success
   */
  products3(id: number): Promise<ProductDto>;
  /**
   * @param body (optional)
   * @return Success
   */
  products4(id: number, body: ProductForUpdatingDto | undefined): Promise<void>;
  /**
   * @param body (optional)
   * @return Success
   */
  products5(id: number, body: Operation[] | null | undefined): Promise<void>;
}

export class Client implements IClient {
  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
    this.http = http ? http : <any>window;
    this.baseUrl = baseUrl ? baseUrl : "";
  }

  /**
   * @param body (optional)
   * @return Success
   */
  orderItems(body: OrderItemForCreatingDto | undefined): Promise<OrderItemDto> {
    let url_ = this.baseUrl + "/OrderItems";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ = <RequestInit>{
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processOrderItems(_response);
    });
  }

  protected processOrderItems(response: Response): Promise<OrderItemDto> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = OrderItemDto.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<OrderItemDto>(<any>null);
  }

  /**
   * @param orderId (optional)
   * @param id (optional)
   * @param pageIndex (optional)
   * @param pageSize (optional)
   * @param orderBy (optional)
   * @return Success
   */
  orderItemsAll(orderId: number | null | undefined, id: number | null | undefined, pageIndex: number | null | undefined, pageSize: number | null | undefined, orderBy: string | null | undefined): Promise<OrderItemDto[]> {
    let url_ = this.baseUrl + "/OrderItems?";
    if (orderId !== undefined && orderId !== null)
      url_ += "OrderId=" + encodeURIComponent("" + orderId) + "&";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    if (pageIndex !== undefined && pageIndex !== null)
      url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
    if (pageSize !== undefined && pageSize !== null)
      url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
    if (orderBy !== undefined && orderBy !== null)
      url_ += "OrderBy=" + encodeURIComponent("" + orderBy) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <RequestInit>{
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processOrderItemsAll(_response);
    });
  }

  protected processOrderItemsAll(response: Response): Promise<OrderItemDto[]> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(OrderItemDto.fromJS(item));
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<OrderItemDto[]>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  orderItems2(id: number | undefined): Promise<void> {
    let url_ = this.baseUrl + "/OrderItems?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <RequestInit>{
      method: "DELETE",
      headers: {
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processOrderItems2(_response);
    });
  }

  protected processOrderItems2(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(<any>null);
  }

  /**
   * @return Success
   */
  orderItems3(id: number): Promise<OrderItemDto> {
    let url_ = this.baseUrl + "/OrderItems/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <RequestInit>{
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processOrderItems3(_response);
    });
  }

  protected processOrderItems3(response: Response): Promise<OrderItemDto> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = OrderItemDto.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<OrderItemDto>(<any>null);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  orderItems4(id: number, body: OrderItemForUpdatingDto | undefined): Promise<void> {
    let url_ = this.baseUrl + "/OrderItems/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ = <RequestInit>{
      body: content_,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processOrderItems4(_response);
    });
  }

  protected processOrderItems4(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(<any>null);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  orderItems5(id: number, body: Operation[] | null | undefined): Promise<void> {
    let url_ = this.baseUrl + "/OrderItems/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ = <RequestInit>{
      body: content_,
      method: "PATCH",
      headers: {
        "Content-Type": "application/json-patch+json",
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processOrderItems5(_response);
    });
  }

  protected processOrderItems5(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(<any>null);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  orders(body: OrderForCreatingDto | undefined): Promise<OrderDto> {
    let url_ = this.baseUrl + "/Orders";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ = <RequestInit>{
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processOrders(_response);
    });
  }

  protected processOrders(response: Response): Promise<OrderDto> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = OrderDto.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<OrderDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @param pageIndex (optional)
   * @param pageSize (optional)
   * @param orderBy (optional)
   * @return Success
   */
  ordersAll(id: number | null | undefined, pageIndex: number | null | undefined, pageSize: number | null | undefined, orderBy: string | null | undefined): Promise<OrderDto[]> {
    let url_ = this.baseUrl + "/Orders?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    if (pageIndex !== undefined && pageIndex !== null)
      url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
    if (pageSize !== undefined && pageSize !== null)
      url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
    if (orderBy !== undefined && orderBy !== null)
      url_ += "OrderBy=" + encodeURIComponent("" + orderBy) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <RequestInit>{
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processOrdersAll(_response);
    });
  }

  protected processOrdersAll(response: Response): Promise<OrderDto[]> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(OrderDto.fromJS(item));
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<OrderDto[]>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  orders2(id: number | undefined): Promise<void> {
    let url_ = this.baseUrl + "/Orders?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <RequestInit>{
      method: "DELETE",
      headers: {
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processOrders2(_response);
    });
  }

  protected processOrders2(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(<any>null);
  }

  /**
   * @return Success
   */
  orders3(id: number): Promise<OrderDto> {
    let url_ = this.baseUrl + "/Orders/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <RequestInit>{
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processOrders3(_response);
    });
  }

  protected processOrders3(response: Response): Promise<OrderDto> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = OrderDto.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<OrderDto>(<any>null);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  orders4(id: number, body: OrderForUpdatingDto | undefined): Promise<void> {
    let url_ = this.baseUrl + "/Orders/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ = <RequestInit>{
      body: content_,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processOrders4(_response);
    });
  }

  protected processOrders4(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(<any>null);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  orders5(id: number, body: Operation[] | null | undefined): Promise<void> {
    let url_ = this.baseUrl + "/Orders/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ = <RequestInit>{
      body: content_,
      method: "PATCH",
      headers: {
        "Content-Type": "application/json-patch+json",
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processOrders5(_response);
    });
  }

  protected processOrders5(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(<any>null);
  }

  /**
   * @param orderId (optional)
   * @return Success
   */
  orderSummary(orderId: number | undefined): Promise<OrderSummaryDtoSelection> {
    let url_ = this.baseUrl + "/OrderSummary?";
    if (orderId === null)
      throw new Error("The parameter 'orderId' cannot be null.");
    else if (orderId !== undefined)
      url_ += "OrderId=" + encodeURIComponent("" + orderId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <RequestInit>{
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processOrderSummary(_response);
    });
  }

  protected processOrderSummary(response: Response): Promise<OrderSummaryDtoSelection> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = OrderSummaryDtoSelection.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<OrderSummaryDtoSelection>(<any>null);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  products(body: ProductForCreatingDto | undefined): Promise<ProductDto> {
    let url_ = this.baseUrl + "/Products";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ = <RequestInit>{
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processProducts(_response);
    });
  }

  protected processProducts(response: Response): Promise<ProductDto> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ProductDto.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ProductDto>(<any>null);
  }

  /**
   * @param id (optional)
   * @param pageIndex (optional)
   * @param pageSize (optional)
   * @param orderBy (optional)
   * @return Success
   */
  productsAll(id: number | null | undefined, pageIndex: number | null | undefined, pageSize: number | null | undefined, orderBy: string | null | undefined): Promise<ProductDto[]> {
    let url_ = this.baseUrl + "/Products?";
    if (id !== undefined && id !== null)
      url_ += "Id=" + encodeURIComponent("" + id) + "&";
    if (pageIndex !== undefined && pageIndex !== null)
      url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
    if (pageSize !== undefined && pageSize !== null)
      url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
    if (orderBy !== undefined && orderBy !== null)
      url_ += "OrderBy=" + encodeURIComponent("" + orderBy) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <RequestInit>{
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processProductsAll(_response);
    });
  }

  protected processProductsAll(response: Response): Promise<ProductDto[]> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(ProductDto.fromJS(item));
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ProductDto[]>(<any>null);
  }

  /**
   * @param id (optional)
   * @return Success
   */
  products2(id: number | undefined): Promise<void> {
    let url_ = this.baseUrl + "/Products?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <RequestInit>{
      method: "DELETE",
      headers: {
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processProducts2(_response);
    });
  }

  protected processProducts2(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(<any>null);
  }

  /**
   * @return Success
   */
  products3(id: number): Promise<ProductDto> {
    let url_ = this.baseUrl + "/Products/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <RequestInit>{
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processProducts3(_response);
    });
  }

  protected processProducts3(response: Response): Promise<ProductDto> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ProductDto.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<ProductDto>(<any>null);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  products4(id: number, body: ProductForUpdatingDto | undefined): Promise<void> {
    let url_ = this.baseUrl + "/Products/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ = <RequestInit>{
      body: content_,
      method: "PUT",
      headers: {
        "Content-Type": "application/json-patch+json",
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processProducts4(_response);
    });
  }

  protected processProducts4(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(<any>null);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  products5(id: number, body: Operation[] | null | undefined): Promise<void> {
    let url_ = this.baseUrl + "/Products/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ = <RequestInit>{
      body: content_,
      method: "PATCH",
      headers: {
        "Content-Type": "application/json-patch+json",
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processProducts5(_response);
    });
  }

  protected processProducts5(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<void>(<any>null);
  }
}

export class OrderItemForCreatingDto implements IOrderItemForCreatingDto {
  orderId?: number;
  productId?: number;
  quantity?: number;
  price?: number;

  constructor(data?: IOrderItemForCreatingDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.orderId = _data["orderId"];
      this.productId = _data["productId"];
      this.quantity = _data["quantity"];
      this.price = _data["price"];
    }
  }

  static fromJS(data: any): OrderItemForCreatingDto {
    data = typeof data === 'object' ? data : {};
    let result = new OrderItemForCreatingDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["orderId"] = this.orderId;
    data["productId"] = this.productId;
    data["quantity"] = this.quantity;
    data["price"] = this.price;
    return data;
  }
}

export interface IOrderItemForCreatingDto {
  orderId?: number;
  productId?: number;
  quantity?: number;
  price?: number;
}

export class OrderItemDto implements IOrderItemDto {
  id?: number;
  productName?: string | undefined;
  productId?: number;
  quantity?: number;
  price?: number;

  constructor(data?: IOrderItemDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.productName = _data["productName"];
      this.productId = _data["productId"];
      this.quantity = _data["quantity"];
      this.price = _data["price"];
    }
  }

  static fromJS(data: any): OrderItemDto {
    data = typeof data === 'object' ? data : {};
    let result = new OrderItemDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["productName"] = this.productName;
    data["productId"] = this.productId;
    data["quantity"] = this.quantity;
    data["price"] = this.price;
    return data;
  }
}

export interface IOrderItemDto {
  id?: number;
  productName?: string | undefined;
  productId?: number;
  quantity?: number;
  price?: number;
}

export class OrderItemForUpdatingDto implements IOrderItemForUpdatingDto {
  id?: number;
  productId?: number;
  quantity?: number;
  price?: number;

  constructor(data?: IOrderItemForUpdatingDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.productId = _data["productId"];
      this.quantity = _data["quantity"];
      this.price = _data["price"];
    }
  }

  static fromJS(data: any): OrderItemForUpdatingDto {
    data = typeof data === 'object' ? data : {};
    let result = new OrderItemForUpdatingDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["productId"] = this.productId;
    data["quantity"] = this.quantity;
    data["price"] = this.price;
    return data;
  }
}

export interface IOrderItemForUpdatingDto {
  id?: number;
  productId?: number;
  quantity?: number;
  price?: number;
}

export enum OperationType {
  Add = "Add",
  Remove = "Remove",
  Replace = "Replace",
  Move = "Move",
  Copy = "Copy",
  Test = "Test",
  Invalid = "Invalid",
}

export class Operation implements IOperation {
  value?: any | undefined;
  operationType?: OperationType;
  path?: string | undefined;
  op?: string | undefined;
  from?: string | undefined;

  constructor(data?: IOperation) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.value = _data["value"];
      this.operationType = _data["operationType"];
      this.path = _data["path"];
      this.op = _data["op"];
      this.from = _data["from"];
    }
  }

  static fromJS(data: any): Operation {
    data = typeof data === 'object' ? data : {};
    let result = new Operation();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["value"] = this.value;
    data["operationType"] = this.operationType;
    data["path"] = this.path;
    data["op"] = this.op;
    data["from"] = this.from;
    return data;
  }
}

export interface IOperation {
  value?: any | undefined;
  operationType?: OperationType;
  path?: string | undefined;
  op?: string | undefined;
  from?: string | undefined;
}

export enum OrderStatus {
  InProgress = "InProgress",
  Completed = "Completed",
}

export class OrderForCreatingDto implements IOrderForCreatingDto {
  orderStatus?: OrderStatus;
  timestamp?: Date;

  constructor(data?: IOrderForCreatingDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.orderStatus = _data["orderStatus"];
      this.timestamp = _data["timestamp"] ? new Date(_data["timestamp"].toString()) : <any>undefined;
    }
  }

  static fromJS(data: any): OrderForCreatingDto {
    data = typeof data === 'object' ? data : {};
    let result = new OrderForCreatingDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["orderStatus"] = this.orderStatus;
    data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>undefined;
    return data;
  }
}

export interface IOrderForCreatingDto {
  orderStatus?: OrderStatus;
  timestamp?: Date;
}

export class OrderDto implements IOrderDto {
  id?: number;
  orderStatus?: OrderStatus;
  timestamp?: Date;

  constructor(data?: IOrderDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.orderStatus = _data["orderStatus"];
      this.timestamp = _data["timestamp"] ? new Date(_data["timestamp"].toString()) : <any>undefined;
    }
  }

  static fromJS(data: any): OrderDto {
    data = typeof data === 'object' ? data : {};
    let result = new OrderDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["orderStatus"] = this.orderStatus;
    data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>undefined;
    return data;
  }
}

export interface IOrderDto {
  id?: number;
  orderStatus?: OrderStatus;
  timestamp?: Date;
}

export class OrderForUpdatingDto implements IOrderForUpdatingDto {
  orderStatus?: OrderStatus;

  constructor(data?: IOrderForUpdatingDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.orderStatus = _data["orderStatus"];
    }
  }

  static fromJS(data: any): OrderForUpdatingDto {
    data = typeof data === 'object' ? data : {};
    let result = new OrderForUpdatingDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["orderStatus"] = this.orderStatus;
    return data;
  }
}

export interface IOrderForUpdatingDto {
  orderStatus?: OrderStatus;
}

export class OrderSummaryItemDto implements IOrderSummaryItemDto {
  productName?: string | undefined;
  quantity?: number;
  price?: number;
  totalPrice?: number;
  number?: number;

  constructor(data?: IOrderSummaryItemDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.productName = _data["productName"];
      this.quantity = _data["quantity"];
      this.price = _data["price"];
      this.totalPrice = _data["totalPrice"];
      this.number = _data["number"];
    }
  }

  static fromJS(data: any): OrderSummaryItemDto {
    data = typeof data === 'object' ? data : {};
    let result = new OrderSummaryItemDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["productName"] = this.productName;
    data["quantity"] = this.quantity;
    data["price"] = this.price;
    data["totalPrice"] = this.totalPrice;
    data["number"] = this.number;
    return data;
  }
}

export interface IOrderSummaryItemDto {
  productName?: string | undefined;
  quantity?: number;
  price?: number;
  totalPrice?: number;
  number?: number;
}

export class OrderSummaryDto implements IOrderSummaryDto {
  number?: string | undefined;
  date?: Date;
  status?: OrderStatus;
  stateName?: string | undefined;
  totalPrice?: number;
  totalProductPrice?: number;
  totalQuantity?: number;
  items?: OrderSummaryItemDto[] | undefined;

  constructor(data?: IOrderSummaryDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.number = _data["number"];
      this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
      this.status = _data["status"];
      this.stateName = _data["stateName"];
      this.totalPrice = _data["totalPrice"];
      this.totalProductPrice = _data["totalProductPrice"];
      this.totalQuantity = _data["totalQuantity"];
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(OrderSummaryItemDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): OrderSummaryDto {
    data = typeof data === 'object' ? data : {};
    let result = new OrderSummaryDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["number"] = this.number;
    data["date"] = this.date ? this.date.toISOString() : <any>undefined;
    data["status"] = this.status;
    data["stateName"] = this.stateName;
    data["totalPrice"] = this.totalPrice;
    data["totalProductPrice"] = this.totalProductPrice;
    data["totalQuantity"] = this.totalQuantity;
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items)
        data["items"].push(item.toJSON());
    }
    return data;
  }
}

export interface IOrderSummaryDto {
  number?: string | undefined;
  date?: Date;
  status?: OrderStatus;
  stateName?: string | undefined;
  totalPrice?: number;
  totalProductPrice?: number;
  totalQuantity?: number;
  items?: OrderSummaryItemDto[] | undefined;
}

export class OrderSummaryDtoSelection implements IOrderSummaryDtoSelection {
  items?: OrderSummaryDto[] | undefined;
  totalCount?: number;
  filteredCount?: number;

  constructor(data?: IOrderSummaryDtoSelection) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(OrderSummaryDto.fromJS(item));
      }
      this.totalCount = _data["totalCount"];
      this.filteredCount = _data["filteredCount"];
    }
  }

  static fromJS(data: any): OrderSummaryDtoSelection {
    data = typeof data === 'object' ? data : {};
    let result = new OrderSummaryDtoSelection();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items)
        data["items"].push(item.toJSON());
    }
    data["totalCount"] = this.totalCount;
    data["filteredCount"] = this.filteredCount;
    return data;
  }
}

export interface IOrderSummaryDtoSelection {
  items?: OrderSummaryDto[] | undefined;
  totalCount?: number;
  filteredCount?: number;
}

export class ProductForCreatingDto implements IProductForCreatingDto {
  name?: string | undefined;
  description?: string | undefined;
  price?: number;

  constructor(data?: IProductForCreatingDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
      this.description = _data["description"];
      this.price = _data["price"];
    }
  }

  static fromJS(data: any): ProductForCreatingDto {
    data = typeof data === 'object' ? data : {};
    let result = new ProductForCreatingDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["name"] = this.name;
    data["description"] = this.description;
    data["price"] = this.price;
    return data;
  }
}

export interface IProductForCreatingDto {
  name?: string | undefined;
  description?: string | undefined;
  price?: number;
}

export class ProductDto implements IProductDto {
  id?: number;
  name?: string | undefined;
  description?: string | undefined;
  price?: number;

  constructor(data?: IProductDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.description = _data["description"];
      this.price = _data["price"];
    }
  }

  static fromJS(data: any): ProductDto {
    data = typeof data === 'object' ? data : {};
    let result = new ProductDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["description"] = this.description;
    data["price"] = this.price;
    return data;
  }
}

export interface IProductDto {
  id?: number;
  name?: string | undefined;
  description?: string | undefined;
  price?: number;
}

export class ProductForUpdatingDto implements IProductForUpdatingDto {
  name?: string | undefined;
  description?: string | undefined;
  price?: number;

  constructor(data?: IProductForUpdatingDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
      this.description = _data["description"];
      this.price = _data["price"];
    }
  }

  static fromJS(data: any): ProductForUpdatingDto {
    data = typeof data === 'object' ? data : {};
    let result = new ProductForUpdatingDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["name"] = this.name;
    data["description"] = this.description;
    data["price"] = this.price;
    return data;
  }
}

export interface IProductForUpdatingDto {
  name?: string | undefined;
  description?: string | undefined;
  price?: number;
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
  if (result !== null && result !== undefined)
    throw result;
  else
    throw new ApiException(message, status, response, headers, null);
}
